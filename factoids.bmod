#!/usr/bin/env bash

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2, June 1991.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/gpl-2.0.html>,
# or in pdf format at <http://www.dhampir.no/stuff/private/gpl-2.0.pdf>

# Copyright 2012,2014 - Ã˜yvind 'bolt' Hvidsten   <bolt@dhampir.no>

! ${GHOST:-false} || return 0

factoids_factsfile="$CONFIG/factoids_approved.dat"
factoids_newfactsfile="$CONFIG/factoids_new.dat"

function factoids_error
{
	if ${FACTOIDS_HELPFUL:-false}; then
		factoids_replace_reply "$(src_nick)" "dummy" "<reply>I have no idea what that means. Anyone can teach me new things, though. Just say things like \"%ax is 2\", and the next time someone says \"%ax\", I'll know it's \"2\"."
	else
		case "$((RANDOM%10))" in
			0) freply ${FACTOIDS_PRIORITY:-0} "Are you on crack?" ;;
			1) freply ${FACTOIDS_PRIORITY:-0} "lolwhut?" ;;
			2) freply ${FACTOIDS_PRIORITY:-0} "Really? Cool." ;;
			3) freply ${FACTOIDS_PRIORITY:-0} "w00t!" ;;
			4) freply ${FACTOIDS_PRIORITY:-0} "I have no idea what you're on about" ;;
			5) freply ${FACTOIDS_PRIORITY:-0} "This is really confusing..." ;;
			6) freply ${FACTOIDS_PRIORITY:-0} "Frak! I failed to interpret that!" ;;
			7) freply ${FACTOIDS_PRIORITY:-0} "There's no way I'm parsing that junk!" ;;
			8) freply ${FACTOIDS_PRIORITY:-0} "Teach me! Teach me!" ;;
			9) freply ${FACTOIDS_PRIORITY:-0} "I'm listening..." ;;
			*) freply ${FACTOIDS_PRIORITY:-0} "My owner absolutely screwed up the factoids mod." ;;
		esac
	fi
}
function factoids_help
{
	reply "factoids: info, forget, approve, disapprove, unapprove, lock, unlock, approved, raw, replace..."
}
function factoids_learn
{
	local key=$1 orig creator=$2 value=$3
	IFS=$'\t' read -r key orig locked creator value <<<"${key,,}"$'\t'"$key"$'\t'"false"$'\t'"$creator"$'\t'"$value"
	if
		[[ -z "$key" ]] ||
		[[ -z "$orig" ]] ||
		[[ -z "$creator" ]] ||
		[[ -z "$value" ]]
	then
		sf_stdoutv "$MOD: Unable to learn factoid. Invalid input data:"
		sf_stdoutv "$MOD: key:     $key"
		sf_stdoutv "$MOD: orig:    $orig"
		sf_stdoutv "$MOD: creator: $creator"
		sf_stdoutv "$MOD: value:   $value"
		factoids_error
	else
		factoids_newfacts["$key"]="$orig"$'\t'"$locked"$'\t'"$creator"$'\t'"$value"
	fi
	factoids_save
}
function factoids_islocked
{
	local key=${1,,} orig locked creator value
	if [[ -n "${factoids_facts[$key]:-}" ]]; then
		IFS=$'\t' read -r orig locked creator value <<<"${factoids_facts[$key]}"
		if $locked; then
			reply "\"$orig\" is a locked factoid. An admin will need to unlock it before it can be altered."
			return 0
		fi
	fi
	return 1
}
function factoids_lock
{
	local user=$1 data=$2 key orig
	read -r key <<<"$data"
	if
		[[ -z "$user" ]] ||
		[[ -z "$key" ]]
	then
		reply "Usage: factoid[s] lock <key>"
	elif
		admin_verbosehas "$user"
	then
		orig=$key
		key=${key,,}
		if [[ -n "${factoids_newfacts[$key]:-}" ]]; then
			reply "Only approved factoids with no unapproved siblings can be locked."
		elif [[ -z "${factoids_facts[$key]:-}" ]]; then
			reply "Unknown factoid."
		else
			IFS=$'\t' read -r orig locked creator value <<<"${factoids_facts[$key]}"
			if $locked; then
				reply "Already locked."
			else
				locked=true
				factoids_facts["$key"]="$orig"$'\t'"$locked"$'\t'"$creator"$'\t'"$value"
				reply "\"$orig\" has been locked."
			fi
		fi
	fi
	factoids_save
}
function factoids_unlock
{
	local user=$1 data=$2 key orig
	read -r key <<<"$data"
	if
		[[ -z "$user" ]] ||
		[[ -z "$key" ]]
	then
		reply "Usage: factoid[s] unlock <key>"
	elif
		admin_verbosehas "$user"
	then
		orig=$key
		key=${key,,}
		if [[ -n "${factoids_newfacts[$key]:-}" ]]; then
			reply "Only approved factoids with no unapproved siblings can be unlocked."
		elif [[ -z "${factoids_facts[$key]:-}" ]]; then
			reply "Unknown factoid."
		else
			IFS=$'\t' read -r orig locked creator value <<<"${factoids_facts[$key]}"
			if ! $locked; then
				reply "Already unlocked."
			else
				locked=false
				factoids_facts["$key"]="$orig"$'\t'"$locked"$'\t'"$creator"$'\t'"$value"
				reply "\"$orig\" has been unlocked."
			fi
		fi
	fi
	factoids_save
}
function factoids_approve
{
	local user=$1 data=$2 key orig locked creator value
	read -r key <<<"$data"
	if
		[[ -z "$user" ]] ||
		[[ -z "$key" ]]
	then
		reply "Usage: factoid[s] approve <key>"
	elif
		admin_verbosehas "$user"
	then
		key=${key,,}
		if [[ -n "${factoids_newfacts[$key]:-}" ]]; then
			IFS=$'\t' read -r orig locked creator value <<<"${factoids_newfacts[$key]}"
			factoids_facts[$key]="${factoids_newfacts[$key]}"
			unset "factoids_newfacts[$key]"
			reply "\"$orig\" has been approved."
		elif [[ -n "${factoids_facts[$key]:-}" ]]; then
			reply "Already approved."
		else
			reply "Unknown factoid."
		fi
	fi
	factoids_save
}
function factoids_disapprove
{
	local user=$1 data=$2 key orig locked creator value
	read -r key <<<"$data"
	if
		[[ -z "$user" ]] ||
		[[ -z "$key" ]]
	then
		reply "Usage: factoid[s] disapprove <key>"
	elif
		admin_verbosehas "$user"
	then
		key=${key,,}
		if [[ -n "${factoids_newfacts[$key]:-}" ]]; then
			IFS=$'\t' read -r orig locked creator value <<<"${factoids_newfacts[$key]}"
			reply "\"$orig\" already exists in an unapproved state."
		elif [[ -n "${factoids_facts[$key]:-}" ]]; then
			IFS=$'\t' read -r orig locked creator value <<<"${factoids_facts[$key]}"
			factoids_newfacts[$key]="${factoids_facts[$key]}"
			unset "factoids_facts[$key]"
			reply "\"$orig\" has been disapproved."
		else
			reply "Unknown factoid."
		fi
	fi
	factoids_save
}
function factoids_forget
{
	local key=${1,,} orig=$1
	if [[ -z "$key" ]]; then
		reply "Usage: factoid[s] forget <key>"
	elif [[ -z "${factoids_newfacts[$key]:-}" ]]; then
		if [[ -z "${factoids_facts[$key]:-}" ]]; then
			reply "Unknown factoid."
		else
			reply "\"$orig\" is approved. Disapprove it first."
		fi
	else
		unset "factoids_newfacts[$key]"
		reply "I forgot about the unapproved factoid \"$orig\"."
	fi
	factoids_save
}
function factoids_replace_reply
{
	local req=$1 key=${2,,} orig=$2 value=$3 add safety_check action=false
	read -r value <<<"$value"

	if ! $factoids_raw; then
		if [[ "$value" = "<reply>"* ]]; then
			read -r value <<<"${value#<reply>}"
		elif [[ "$value" = "<action>"* ]]; then
			read -r value <<<"${value#<action>}"
			action=true
		elif [[ "$value" = "<rand>" ]]; then
			case "$((RANDOM%17))" in
				 0) value="I agree!" ;;
				 1) value="Most definitely!" ;;
				 2) value="Sure thing!" ;;
				 3) value="Yes?" ;;
				 4) value="Maybe?" ;;
				 5) value="O.o" ;;
				 6) value="-.-" ;;
				 7) value="Somehow I doubt that." ;;
				 8) value="Nah." ;;
				 9) value="Nope!" ;;
				10) value="Nu-huh!" ;;
				11) value="Probably?" ;;
				12) value="Why not?" ;;
				13) value="Meh." ;;
				14) value="I don't care :D" ;;
				15) value="No idea! \o/" ;;
				 *) value="Right!" ;;
			esac
		else
			case "$((RANDOM%6))" in
				0) add="I think $orig is" ;;
				1) add="Someone told me $orig is" ;;
				2) add="$orig is probably" ;;
				3) add="$orig is, like," ;;
				4) add="$orig is known as" ;;
				5) add="I would assume $orig is" ;;
				*) reply "My owner absolutely screwed up the factoids mod."; return 0 ;;
			esac
			value="${add} ${value}"
		fi
	fi

	if [[ -z "$value" ]]; then
		sf_warning "$MOD: null value about to be printed - aborting"
		return
	fi

	value="${value//%%/$'\t'}"
	
	IFS="%" read -ra safety_check <<<"$value"
	if (( ${#safety_check[@]} - 1 > ${FACTOIDS_MAXREPLACE:-10} )); then
		sf_warning "$MOD: Too many replacement opportunities in factoid key \"$key\". Not replacing."
	elif ! $factoids_raw; then
		value="${value//%a/$ADDRESS}"
		value="${value//%N/$nick}"
		value="${value//%n/$req}"
		value="${value//%o/${OWNER:-}}"
		value="${value//%t/$(sf_timestamp)}"
		value="${value//%u/$(sf_unixtime)}"
	fi

	if $factoids_raw; then
		value="${value//$'\t'/%%}"
	else
		value="${value//$'\t'/%}"
	fi
	if $action; then 
		faction ${FACTOIDS_PRIORITY:-0} "$value"
	else
		freply ${FACTOIDS_PRIORITY:-0} "$value"
	fi
}
function factoids_lookupa
{
	local req=$1 key=${2,,} orig=$2 locked creator value=""
	[[ -n "$key" ]] || return 1
	IFS=$'\t' read -r orig locked creator value <<<"${factoids_facts[$key]:-}"
	[[ -n "$value" ]] || return 1
	factoids_replace_reply "$req" "$orig" "$value"
}
function factoids_lookup
{
	local req=$1 key=${2,,} orig=$2 locked creator value=""
	[[ -n "$key" ]] || return 1
	IFS=$'\t' read -r orig locked creator value <<<"${factoids_newfacts[$key]:-}"
	if [[ -n "$value" ]]; then
		factoids_replace_reply "$req" "$orig" "$value"
	else
		orig=$2
		if factoids_lookupa "$req" "$orig"; then
			return 0
		else
			return 1
		fi
	fi
}
function factoids_info
{
	local key=${1,,} orig=$1 locked creator value="" new text
	IFS=$'\t' read -r orig locked creator value <<<"${factoids_newfacts[$key]:-}"
	if [[ -n "$value" ]]; then
		new=true
	else
		orig=$1
		new=false
		IFS=$'\t' read -r orig locked creator value <<<"${factoids_facts[$key]:-}"
	fi

	if [[ -n "$value" ]]; then
		text="\"$orig\" was added by \"$creator\"."
		if $new; then
			text+=" It is not yet approved by an admin."
			IFS=$'\t' read -r orig locked creator value <<<"${factoids_facts[$key]:-}"
			if [[ -n "$value" ]]; then
				text+=" An approved version, added by \"$creator\", exists too. Tip: !factoids approved <key> shows approved factoids only."
			else
				orig=$1
			fi
		else
			if $locked; then
				text+=" It is locked and approved by an admin."
			else
				text+=" It is approved by an admin."
			fi
		fi
		reply "$text"
	else
		reply "There is no factoid on the subject of \"$1\". Please consider making one."
	fi
}
function factoids_save
{
	local t n

    sf_stdoutv "$MOD: Writing $factoids_factsfile"
    sf_mkfile -qo t 
    for n in "${!factoids_facts[@]}"; do
        echo "$n"$'\t'"${factoids_facts["$n"]}" >>"$t"                                                                                                                                                                                                                                                        
    done
    cat "$t" >"$factoids_factsfile"
    rm "$t"
    sf_rm_abort "$t"

    sf_stdoutv "$MOD: Writing $factoids_newfactsfile"
    sf_mkfile -qo t 
    for n in "${!factoids_newfacts[@]}"; do
        echo "$n"$'\t'"${factoids_newfacts["$n"]}" >>"$t"
    done
    cat "$t" >"$factoids_newfactsfile"
    rm "$t"
    sf_rm_abort "$t"
}
function factoids_readfactsfile
{
	if sf_goodfile "$factoids_factsfile"; then
		sf_stdoutv "$MOD: Reading $factoids_factsfile"
		local key orig locked creator value
		while IFS=$'\t' read -r key orig locked creator value; do
			factoids_facts["$key"]="$orig"$'\t'"$locked"$'\t'"$creator"$'\t'"$value"
		done <"$factoids_factsfile"
	else
		sf_stdoutv "$MOD: $factoids_factsfile is missing or no good"
	fi
}
function factoids_readnewfactsfile
{
	if sf_goodfile "$factoids_newfactsfile"; then
		sf_stdoutv "$MOD: Reading $factoids_newfactsfile"
		local key orig locked creator value
		while IFS=$'\t' read -r key orig locked creator value; do
			factoids_newfacts["$key"]="$orig"$'\t'"$locked"$'\t'"$creator"$'\t'"$value"
		done <"$factoids_newfactsfile"
	else
		sf_stdoutv "$MOD: $factoids_newfactsfile is missing or no good"
	fi
}
function factoids_process
{
	local data=$data key

	if [[ "$data" = *" is "* ]]; then
		if ! factoids_islocked "${data%% is *}"; then
			key=${data%% is *}
			key="${key//%%/$'\t'}"
			key="${key//%i/i}"
			key="${key//$'\t'/%}"
			if [[ "$key" =~ ^[[:alnum:][:punct:]\ ]+$ ]]; then
				if factoids_learn "$key" "$(src_nick)" "${data#* is }"; then
					case "$((RANDOM%3))" in
						0) freply ${FACTOIDS_PRIORITY:-0} "Alright." ;;
						1) freply ${FACTOIDS_PRIORITY:-0} "Yes, yes it is." ;;
						2) freply ${FACTOIDS_PRIORITY:-0} "Agreed." ;;
						*) reply "My owner absolutely screwed up the factoids mod." ;;
					esac
				fi
			else
				freply ${FACTOIDS_PRIORITY:-0} "No."
			fi
		fi
	else
		data="${data//%%/$'\t'}"
		data="${data//%i/i}"
		data="${data//$'\t'/%}"

		case "$data" in
			"factoids "*|"factoid "*)
				data="${data#* }"
				read -r data <<<"$data"
				case "$data" in
					"info "*) factoids_info "${data#info }" ;;
					"forget "*) factoids_islocked "${data#forget }" || factoids_forget "${data#forget }" ;;
					"approve "*) factoids_islocked "${data#approve }" || factoids_approve "$(src_host)" "${data#approve }" ;;
					"disapprove "*) factoids_islocked "${data#disapprove }" || factoids_disapprove "$(src_host)" "${data#disapprove }" ;;
					"unapprove "*) factoids_islocked "${data#unapprove }" || factoids_disapprove "$(src_host)" "${data#unapprove }" ;;
					"lock "*) factoids_lock "$(src_host)" "${data#lock }" ;;
					"unlock "*) factoids_unlock "$(src_host)" "${data#unlock }" ;;
					"reload")
						if admin_verbosehas "$(src_host)"; then
							unset factoids_facts
							unset factoids_newfacts
							reply "Reloaded."
						fi
					;;
					"approved "*|"raw approved "*)
						if
							! factoids_lookupa "$(src_nick)" "${data#*approved }" && ${FACTOIDS_ALWAYS:-false}
						then
							reply "No approved version of \"${data#*approved }\""
						fi
					;;
					"raw "*)
						if
							! factoids_lookup "$(src_nick)" "${data#raw }" && ${FACTOIDS_ALWAYS:-false} &&
							! factoids_lookup "$(src_nick)" "factoids_help" && ${FACTOIDS_ALWAYS:-false}
						then
							factoids_error
						fi
					;;
					"replace")
						factoids_replace_reply "$(src_nick)" "dummy" "<reply>In factoids: %%n = requester's nick (%n), %%N = my nick (%N), %%o = owner (%o), %%t = timestamp (%t), %%a = addresschar (%a), %%u = unixtime (%u). To see a factoid without replacements, use \"factoids raw <factoid>\". Also, %i is always replaced with \"i\", allowing you to include the keyword \"is\" and similar as part of a factoid name."
					;;
					*) factoids_help ;;
				esac
			;;
			factoid|factoids) factoids_help ;;
			*)
				factoids_req="$(src_nick)"
				if
					[[ "$target" = "#"* ]] &&
					[[ "$data" =~ ^.+\ \>\ ?[^[:space:]]+$ ]]
				then
					read -r factoids_req <<<"${data##*">"}"
					read -r data <<<"${data%">"*}"
				fi
				reply_nick="$factoids_req"
				factoids_found=false
				factoids_data=$data
				while true; do
					if factoids_lookup "$factoids_req" "$factoids_data"; then
						factoids_found=true
						break
					fi
					if ! ${FACTOIDS_RECURSIVE:-true}; then
						break
					fi
					if [[ "$factoids_data" != *" "* ]] || [[ -z "$factoids_data" ]]; then
						break
					fi
					factoids_data=${factoids_data% *}
				done
				if
					! $factoids_found &&
					! factoids_lookup "$factoids_req" "factoids_help" && ${FACTOIDS_ALWAYS:-false}
				then
					unset reply_nick
					factoids_error
				fi
				unset reply_nick
			;;
		esac
	fi
}

if [[ -z "${factoids_facts[*]:-}" ]]; then
	declare -A factoids_facts=()
	factoids_readfactsfile
fi
if [[ -z "${factoids_newfacts[*]:-}" ]]; then
	declare -A factoids_newfacts=()
	factoids_readnewfactsfile
fi

if [[ -n "$reply" ]]; then
	if
		[[ "$data" = "factoid raw "* ]] ||
		[[ "$data" = "factoids raw "* ]]
	then
		factoids_raw=true
	else
		factoids_raw=false
	fi
	factoids_process
fi
