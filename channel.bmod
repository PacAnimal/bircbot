#!/usr/bin/env bash

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2, June 1991.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/gpl-2.0.html>,
# or in pdf format at <http://www.dhampir.no/stuff/private/gpl-2.0.pdf>

# Copyright 2012 - Ã˜yvind 'bolt' Hvidsten   <bolt@dhampir.no>

channel_seenfile="$CONFIG/seen.dat"
channel_maxfile="$CONFIG/max.dat"
channel_saveseen=true # set to false when batch adding
channel_ljt=${channel_ljt:-0} # last join time

if [[ -z "${CHANNELS[*]:-}" ]]; then
	sf_warning "$MOD: No channel specified!"
	return
fi

isset current_channels || declare -a current_channels=()
unset_on_reset current_channels
isset channel_names || declare -A channel_names=()
unset_on_reset channel_names
isset channel_seen || declare -A channel_seen=()
unset_on_reset channel_seen

function channel_join_configured
{
	if ((channel_ljt+5 > $(sf_unixtime))); then
		sf_stdoutv "$MOD: Not joining channels. We just did that."
		return
	fi
	local c d
	for c in "${CHANNELS[@]:-}"; do
		for d in "${current_channels[@]:-}"; do
			[[ "$c" != "$d" ]] || continue 2
		done
		sf_stdoutv "$MOD: Attempting to join $c"
		channel_ljt=$(sf_unixtime)
		tx "JOIN $c"
	done
}
function channel_greetname
{
	local channel=$1 name=$2 string=$2 file line
	file="$CONFIG/greeting-${channel}.txt"
	if ${CHANNEL_GREET:-false}; then
		if ! [[ -e "$file" ]]; then
			sf_stdoutv "$MOD: No greeting for channel $channel: $file"
		else
			if ${CHANNEL_SUBSTRING:-false}; then
				while
					[[ -n "$string" ]] &&
					[[ -z "${channel_seen["${string,,}"]:-}" ]] &&
					string=$(cutright "$string")
				do :; done
			else
				if [[ -z "${channel_seen["${string,,}"]:-}" ]]; then
					string=""
				fi
			fi
			if (( ${#string} == 0 )); then
				while read line; do
					say "$channel" "$(eval echo "\"$line\"")"
				done <"$file"
			fi
		fi
	fi
}
function channel_addname
{
	local channel=$1 name=$2
	name=${name#@}
	name=${name#%}
	name=${name#+}
	if [[ -z "${channel_names["$channel"]:-}" ]]; then
		channel_names["$channel"]="$name"
	else
		channel_names["$channel"]="${channel_names["$channel"]} $name"
	fi
	channel_seen "$channel" "$name"
}
function channel_removename
{
	local channel=$1 name=$2 list i
	IFS=" " read -ra list <<<"${channel_names["$channel"]}"
	for i in "${!list[@]}"; do
		if [[ "${list[$i]}" = "$name" ]]; then
			unset "list[$i]"
			break
		fi
	done
	channel_names["$channel"]=${list[@]}
	channel_seen "$channel" "$name"
}
function channel_changename
{
	local src=$1 target=$2 list i j
	for i in "${!channel_names[@]}"; do
		if [[ " ${channel_names["$i"]} " = *" $src "* ]]; then
			IFS=" " read -ra list <<<"${channel_names["$i"]}"
			for j in "${!list[@]}"; do
				if [[ "${list[$j]}" = "$src" ]]; then
					list[$j]=$target
					break
				fi
			done
			channel_names["$i"]=${list[@]}
			sf_stdoutv "$MOD: $src renamed to $target in $i"
			channel_seen "$i" "$src"
			channel_seen "$i" "$target"
		fi
	done
}
function channel_quit
{
	local src=$1 i
	for i in "${!channel_names[@]}"; do
		if [[ " ${channel_names["$i"]} " = *" $src "* ]]; then
			sf_stdoutv "$MOD: $src removed from $i"
			channel_removename "$i" "$src"
		fi
	done
}
function channel_headcount
{
	local channel=$1
	local list=${channel_names["$channel"]:-}
	local count=0
	while [[ "$list" = *" "* ]]; do
		((++count))
		list=${list#* }
	done
	if [[ -n "$list" ]]; then
		((++count))
	fi
	sf_stdout $count
}
function channel_wejoined
{
	local channel=$1
	sf_stdoutv "$MOD: We joined $channel"
	unset "channel_names["$channel"]"
	current_channels+=( "$channel" )
}
function channel_weleft
{
	local channel=$1 i
	sf_stdoutv "$MOD: We left $channel"
	unset "channel_names["$channel"]"
	for i in "${!current_channels[@]}"; do
		if [[ "${current_channels[i]}" = "$channel" ]]; then
			unset "current_channels[i]"
			sf_stdoutv "$MOD: Channel $i removed"
			break
		fi
	done
}
function channel_seen
{
	local channel=$1 name=$2 n N c t # name, Name, channel, time
	sf_stdoutv "$MOD: We saw $name in $channel"
	if [[ -z "${channel_seen[*]:-}" ]] && sf_goodfile "$channel_seenfile"; then
		sf_stdoutv "$MOD: Reading $channel_seenfile"
		while IFS=" " read -r n N c t; do
			channel_seen["$n"]="$N $c $t"
		done <"$channel_seenfile"
	fi
	channel_seen["${name,,}"]="$name $channel $(sf_unixtime)"
	channel_saveseen
}
function channel_unsee
{
	local user=$(src_host) channel nick
	read -r nick <<<"${data#unsee }"
	if
		[[ -z "$nick" ]]
	then
		reply "Usage: unsee <nick>"
	elif
		admin_verbosehas  "$user"
	then
		if [[ -z "${channel_seen["${nick,,}"]:-}" ]]; then
			reply "I have never seen $nick :("
		else
			unset "channel_seen["${nick,,}"]"
			reply "I have unseen $nick"
			channel_saveseen
		fi
	fi
}
function channel_saveseen
{
	$channel_saveseen && ! ${GHOST:-false} || return 0
	local t n
	sf_stdoutv "$MOD: Writing $channel_seenfile"
	sf_mkfile -qo t
	for n in "${!channel_seen[@]}"; do
		echo "$n ${channel_seen["$n"]}" >>"$t"
	done
	cat "$t" >"$channel_seenfile"
	rm "$t"
	sf_rm_abort "$t"
}
function channel_headcountquery
{
	if [[ "$target" != "#"* ]]; then
		reply "That command can only be used in a channel"
	else
		reply "I see $(channel_headcount "$target") people in $target"
	fi
}
function channel_namecount
{
	if ! sf_goodfile "$channel_seenfile"; then
		reply "I've never seen any names..?!"
		return
	fi
	local c=0 line
	while IFS="\r" read -r line; do
		(( ++c ))
	done <"$channel_seenfile"
	reply "I've seen $c unique names"
}
function channel_seenquery
{
	local seenow=false n nick j list
	n=${data#seen }
	n=${n,,}
	n=${n%% *}
	nick=$(src_nick)
	nick=${nick,,}
	if [[ "$n" = "$nick" ]]; then
		reply "Yes, $(src_nick). I see you."
	else
		for i in "${!channel_names[@]}"; do
			IFS=" " read -ra list <<<"${channel_names["$i"]}"
			for j in "${!list[@]}"; do
				if [[ "${list[$j],,}" = "$n" ]]; then
					reply "I see ${list[$j]} in $i right now..."
					seenow=true
				fi
			done
		done
		if ! $seenow; then
			if [[ -n "${channel_seen["$n"]:-}" ]]; then
				IFS=" " read -r N c t <<<"${channel_seen["$n"]}" # Name, channel, time
				reply "I saw $N in $c $(sf_seconds2dayslong $(($(sf_unixtime) - $t))) ago"
				unset N c t
			else
				reply "I have never seen ${data#seen } :("
			fi
		fi
	fi
}
function channel_trackmax
{
	${CHANNEL_PUBMAX:-false} && ! ${GHOST:-false} || return 0
	local channel=$1 current=$2
	isset channel_max || declare -A channel_max=()
	channel_max["$target"]=0
	if sf_goodfile "$channel_maxfile"; then
		while IFS=" " read -r c m; do
			channel_max[$c]="$m"
		done <"$channel_maxfile"
	fi
	if (( current > channel_max[$channel] )); then
		say "$channel" "New peak headcount: $current"
		channel_max["$channel"]="$current"
		>"$channel_maxfile"
		for c in "${!channel_max[@]}"; do
			echo "$c ${channel_max["$c"]}" >>"$channel_maxfile"
		done
	fi
}
function channel_printmax
{
	local channel=$1
	if [[ "$target" != "#"* ]]; then
		reply "That command can only be used in a channel"
	elif sf_goodfile "$channel_maxfile"; then
		while IFS=" " read -r c m; do
			if [[ "$c" = "$channel" ]]; then
				reply "I have seen a peak of $m people in ${channel}"
				break
			fi
		done <"$channel_maxfile"
	else
		reply "I have no record of people in ${channel}"
	fi
}

case "$cmd" in
	JOIN)
		if [[ "$(src_nick)" = "$nick" ]]; then
			channel_wejoined "$target"
		else
			sf_stdoutv "$MOD: $(src_nick) joined $target"
			channel_greetname "$target" "$(src_nick)"
			channel_addname "$target" "$(src_nick)"
			channel_trackmax "$target" "$(channel_headcount "$target")"
		fi
	;;
	PART)
		if [[ "$(src_nick)" = "$nick" ]]; then
			channel_weleft "$target"
		else
			sf_stdoutv "$MOD: $(src_nick) left $target"
			channel_removename "$target" "$(src_nick)"
		fi
	;;
	KICK)
		if [[ "${data%% *}" = "$nick" ]]; then
			channel_weleft "$target"
		else
			sf_stdoutv "$MOD: $(src_nick) kicked ${data%% *} from $target"
			channel_removename "$target" "${data%% *}"
		fi
	;;
	QUIT)
		sf_stdoutv "$MOD: $(src_nick) quit"
		channel_quit "$(src_nick)"
	;;
	NICK)
		sf_stdoutv "$MOD: $(src_nick) is now known as ${target#:}"
		channel_changename "$(src_nick)" "${target#:}"
	;;
	$RPL_NAMREPLY)
		if $srv; then
			s=${data#* }
			s=${s%% :*}
			sf_stdoutv "$MOD: Names for $s"
			IFS=" " read -ra a <<<"${data#* :}"
			channel_saveseen=false
			for n in "${a[@]}"; do
				channel_addname "$s" "$n"
			done
			channel_saveseen=true
			unset a s n
		fi
	;;
	$RPL_ENDOFNAMES)
		if $srv; then
			sf_stdoutv "$MOD: End of names list"
			channel_saveseen
		fi
	;;
esac

channel_join_configured

if ! ${GHOST:-false} && [[ -n "$reply" ]]; then
	case "$data" in
		headcount)
			channel_headcountquery
		;;
		"seen "*)
			channel_seenquery
		;;
		"unsee "*)
			channel_unsee
		;;
		"peak")
			channel_printmax "$target"
		;;
		"namecount")
			channel_namecount
		;;
	esac
fi
